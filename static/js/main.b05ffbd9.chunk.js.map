{"version":3,"sources":["components/common/Input.tsx","components/common/Card.tsx","components/common/TabPanel.tsx","components/MoviesList.tsx","components/ActorsList.tsx","services/MoviesService.ts","services/ActorsService.ts","ulti/hooks/useDebounce.tsx","constatns/index.tsx","pages/Home.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","margin","spacing","width","Input","onChange","value","classes","className","noValidate","autoComplete","TextField","id","label","minWidth","Card","children","CardContent","TabPanel","index","other","Typography","component","role","hidden","aria-labelledby","Box","p","ellipsis","MoviesList","list","Grid","container","length","map","el","key","item","xs","sm","Chip","color","title","overview","moviesContainer","movie","marginRight","marginBottom","ActorsList","justify","variant","name","size","known_for","original_title","original_name","Movie","t","Movies","MoviesListValidation","results","FetchUpcomingMovieService","a","fetch","process","response","json","result","tPromise","typeSafeData","Promise","resolve","message","payload","reject","SearchMovieService","searchTerm","MovieMandatoryFields","MovieOptionalFields","Actor","Actors","ActorsListValidation","FetchActorsService","console","log","useDebounce","delay","useState","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","tabsConfig","a11yProps","height","flexContainer","HomePage","currentTab","setCurrentTab","setList","setSearchTerm","debouncedSearchTerm","fetchUpcomingMovies","then","CssBaseline","AppBar","position","Toolbar","Tabs","indicatorColor","event","newValue","aria-label","Tab","target","CircularProgress","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","Home","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.b05ffbd9.chunk.js","sourcesContent":["import React,{useEffect} from 'react';\nimport { createStyles, makeStyles, Theme, TextField } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      '& > *': {\n        margin: theme.spacing(1),\n        width: '25ch',\n      },\n    },\n  }),\n);\n\nconst Input = ({ onChange, value }: any) => {\n  const classes = useStyles();\n  return (\n    <form className={classes.root} noValidate autoComplete=\"off\">\n      <TextField value={value} onChange={onChange} id=\"standard-basic\" label=\"Search\" />\n    </form>\n  );\n}\n\nexport default Input;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Card as CardMui, CardContent } from '@material-ui/core';\n\ntype CardProps = {\n  children: object;\n}\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n  }\n})\n\nconst Card = ({ children }: CardProps) => {\n  const classes = useStyles();\n\n  return (\n    <>\n      <CardMui className={classes.root}>\n        <CardContent>\n          {children}\n        </CardContent>\n      </CardMui>\n    </>\n  )\n}\n\nexport default Card\n","import React from 'react';\nimport { Typography,Box } from '@material-ui/core';\n\ntype TabPanelProps = {\n    children?: React.ReactNode;\n    index: any;\n    value: any;\n}\n\nconst TabPanel = ({ children, value, index, ...other }: TabPanelProps)=> {\n\n    return (\n        <Typography\n            component=\"div\"\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`simple-tabpanel-${index}`}\n            aria-labelledby={`simple-tab-${index}`}\n            {...other}\n        >\n            {value === index && <Box p={3}>{children}</Box>}\n        </Typography>\n    );\n}\n\nexport default TabPanel;\n","import React from 'react';\nimport { Grid, Typography, Chip, makeStyles } from '@material-ui/core';\nimport { Card } from './common';\n\nconst useStyles = makeStyles(() => ({\n  ellipsis: {\n\n  },\n\n}));\n\nconst MoviesList = ({ list }: any) => {\n  const classes = useStyles();\n  return (\n    <Grid container spacing={3}>\n      {list.length ? list.map((el: any) => (\n        <Grid key={el.id} item xs={12} sm={4}>\n          <Card>\n            <Chip color=\"primary\" label={`${el.title}`} />\n            <Typography className={classes.ellipsis}>{el.overview}</Typography>\n          </Card>\n        </Grid>\n      )) : \"no result\"}\n\n    </Grid>\n  );\n}\n\nexport default MoviesList;","import React from 'react';\nimport { Grid, Typography, Chip, makeStyles } from '@material-ui/core';\nimport { Card } from './common';\n\nconst useStyles = makeStyles(() => ({\n  moviesContainer: {\n    margin: \"5px 5px 5px 0\",\n  },\n  movie: {\n    marginRight: '2px',\n    marginBottom: '4px'\n  }\n}));\n\nconst ActorsList = ({ list }: any) => {\n  const classes = useStyles();\n  return (\n    <Grid container spacing={3}>\n      {list.length ? list.map((el: any) => (\n        <Grid key={el.id} item xs={12} sm={4}>\n          <Card>\n            <Grid container>\n              <Grid container item xs={12} justify=\"center\">\n                <Typography variant=\"h5\">{el.name}</Typography>\n\n              </Grid>\n              <Grid item xs={12}>\n                <Chip color=\"secondary\" size=\"small\" label={'Movies'} />\n              </Grid>\n              <Grid item xs={12} className={classes.moviesContainer}>\n                {\n                  el.known_for.map((el: any) => (\n                    <Chip className={classes.movie}\n                      key={el.id}\n                      color=\"default\"\n                      size=\"small\"\n                      label={el.original_title ? el.original_title : el.original_name} />\n                  ))\n                }\n              </Grid>\n\n            </Grid>\n\n          </Card>\n        </Grid>\n      )) : \"No results found\"}\n\n    </Grid>\n  );\n}\n\nexport default ActorsList","import * as t from \"io-ts\"\nimport * as tPromise from 'io-ts-promise';\nimport { ServiceResponse} from '../types/Service';\n\nconst Movie = t.type({\n  title: t.string,\n  overview: t.string\n})\nconst Movies = t.array(Movie);\n\ntype Movies = t.TypeOf<typeof Movies>\n\nconst MoviesListValidation = t.type({\n  results: Movies\n});\n\nconst FetchUpcomingMovieService = async(): Promise<ServiceResponse> => {\n  try{\n      const response = await fetch(`https://api.themoviedb.org/3/movie/upcoming?api_key=${process.env.REACT_APP_API_KEY}`);\n      const result = await response.json();\n      const typeSafeData = await tPromise.decode(MoviesListValidation, result);\n      return Promise.resolve({ response: \"success\", message: \"data fetched successfully\", payload: typeSafeData.results });\n  }\n  catch(error){\n    if (tPromise.isDecodeError(error)) {\n      return Promise.reject({ response: \"error\", message: \"Request failed due to invalid data.\", payload: [] })\n    } else {\n      return Promise.reject({\n        response: \"error\", message: \"Request failed due to internal server error\", payload: []\n      })\n    }\n  }\n}\n\n\nconst SearchMovieService = async (searchTerm = 'all'): Promise<ServiceResponse> => {\n  try{\n    const response = await fetch(`https://api.themoviedb.org/3/search/movie?api_key=${process.env.REACT_APP_API_KEY}&query=${searchTerm}`);\n    const result = await response.json();\n    const typeSafeData = await tPromise.decode(MoviesListValidation, result);\n    return Promise.resolve({ response: \"success\", message: \"data fetched successfully\", payload: typeSafeData.results });\n  }\n  catch(error){\n    if (tPromise.isDecodeError(error)) {\n      return Promise.resolve({ response: \"error\", message: \"Request failed due to invalid data.\", payload: [] })\n    } else {\n      return Promise.resolve({\n        response: \"error\", message: \"Request failed due to internal server error\", payload: []\n      })\n    }\n  }\n};\n\nexport {\n  FetchUpcomingMovieService,\n  SearchMovieService\n};","import * as t from \"io-ts\"\nimport * as tPromise from 'io-ts-promise';\nimport { ServiceResponse } from '../types/Service';\n\n\nconst MovieMandatoryFields = t.type({\n  id: t.number,\n})\nconst MovieOptionalFields = t.partial({\n  original_title: t.string,\n  original_name: t.string\n})\n\nconst Movies = t.array(t.intersection([MovieMandatoryFields, MovieOptionalFields]));\n\ntype Movies = t.TypeOf<typeof Movies>\n\n\nconst Actor = t.type({\n  name: t.string,\n  known_for: Movies\n})\nconst Actors = t.array(Actor);\n\ntype Actors = t.TypeOf<typeof Actors>\n\nconst ActorsListValidation = t.type({\n  results: Actors\n});\n\nconst FetchActorsService = async (searchTerm): Promise<ServiceResponse> => {\n\n  try {\n    const response = await fetch(`https://api.themoviedb.org/3/search/person?api_key=${process.env.REACT_APP_API_KEY}&query=${searchTerm}`);\n    const result = await response.json();\n    const typeSafeData = await tPromise.decode(ActorsListValidation, result);\n    return Promise.resolve({ response: \"success\", message: \"data fetched successfully\", payload: typeSafeData.results });\n  }\n  catch (error) {\n    console.log(\"error\", error);\n    if (tPromise.isDecodeError(error)) {\n      return Promise.resolve({ response: \"error\", message: \"Request failed due to invalid data.\", payload: [] })\n    } else {\n      return Promise.resolve({\n        response: \"error\", message: \"Request failed due to internal server error\", payload: []\n      })\n    }\n  }\n};\n\nexport {\n  FetchActorsService,\n};","import React, { useState, useEffect } from 'react';\n\nconst useDebounce = (value, delay) => {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(\n    () => {\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, delay);\n      return () => {\n        clearTimeout(handler);\n      };\n    },\n    [value]\n  );\n\n  return debouncedValue;\n}\n\nexport default useDebounce;","const tabsConfig: any = {\n    movies: 0,\n    actors: 1\n  }\n\nexport{\n    tabsConfig\n}","import React, { useState, useEffect } from 'react';\nimport {\n  CssBaseline, Typography, AppBar, Toolbar,\n  Tabs, Tab, Grid, makeStyles, CircularProgress\n} from '@material-ui/core';\nimport { Input, TabPanel } from '../components/common';\nimport MoviesList from '../components/MoviesList';\nimport ActorsList from '../components/ActorsList';\nimport { SearchMovieService, FetchUpcomingMovieService } from '../services/MoviesService';\nimport { FetchActorsService } from '../services/ActorsService';\nimport useDebounce from '../ulti/hooks/useDebounce';\nimport { tabsConfig } from '../constatns';\n\nconst a11yProps = (index: string) => {\n  return {\n    id: `tab-${index}`,\n  };\n}\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    height: \"100%\",\n  },\n  flexContainer: {\n    height: \"100%\",\n  }\n}));\n\ninterface List{\n  message?: string,\n  response: string,\n  payload: any\n}\n\nconst HomePage = () => {\n  const classes = useStyles();\n  const [currentTab, setCurrentTab] = useState<any>(tabsConfig.movies);\n  const [list, setList] = useState<List>({ response: 'loading', message: \"\", payload: [] });\n\n  const [searchTerm, setSearchTerm] = useState('');\n  const debouncedSearchTerm = useDebounce(searchTerm, 500);\n\n  useEffect(() => {\n    const fetchUpcomingMovies = async () => {\n      const result = await FetchUpcomingMovieService();\n      setList(result);\n    }\n    fetchUpcomingMovies();\n  }, [])\n\n  useEffect(\n    () => {\n      if (debouncedSearchTerm) {\n        setList({ ...list, response: 'loading' });\n        if (currentTab === tabsConfig.movies) {\n          SearchMovieService(debouncedSearchTerm).then(results => {\n            setList({ ...results });\n          });\n        }\n        else {\n          FetchActorsService(debouncedSearchTerm).then(results => {\n            setList({ ...results });\n          });\n        }\n\n      }\n    },\n    [debouncedSearchTerm]\n  );\n\n  const onNavigate = (event: React.ChangeEvent<{}>, newValue: number) => {\n    const fetchUpcomingMovies = async () => {\n      const result = await FetchUpcomingMovieService();\n      setList({ ...result });\n    }\n\n    if (currentTab !== newValue) {\n      setList({ ...{ response: 'loading', payload: [] } });\n      if (newValue === tabsConfig.movies) {\n        fetchUpcomingMovies();\n      } else {\n        setList({ ...{ response: 'success', payload: [] } });\n      }\n      setSearchTerm('');\n      setCurrentTab(newValue);\n    }\n  };\n\n  const onSearchTerm = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchTerm(event.target.value)\n  };\n\n  return (\n    <>\n      <CssBaseline />\n      <AppBar position=\"relative\">\n        <Toolbar>\n          <Typography variant=\"h6\">\n            Movie searcher\n\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <AppBar position=\"relative\" color=\"default\">\n        <Grid container>\n          <Grid item xs={12} sm={4}>\n            <Tabs classes={{\n              root: classes.root,\n              flexContainer: classes.flexContainer\n            }}\n              indicatorColor=\"primary\"\n              value={currentTab}\n              onChange={onNavigate}\n              aria-label=\"simple tabs example\">\n              <Tab label=\"Movies\" {...a11yProps(tabsConfig.movies)} />\n              <Tab label=\"Actors\" {...a11yProps(tabsConfig.actors)} />\n            </Tabs>\n          </Grid>\n          <Grid item xs={12} sm={8}>\n            <Input value={searchTerm} onChange={onSearchTerm} />\n          </Grid>\n        </Grid>\n\n      </AppBar>\n      <TabPanel value={currentTab} index={tabsConfig.movies}>\n        {list.response === \"loading\" ?\n          <Grid container justify=\"center\"\n          ><CircularProgress />\n          </Grid> : null}\n        {list.response === \"success\" ? <MoviesList list={list.payload} /> : null}\n        {list.response === \"error\" ? list.message : null}\n      </TabPanel>\n      <TabPanel value={currentTab} index={1}>\n        {list.response === \"loading\" ?\n          <Grid container justify=\"center\"\n          ><CircularProgress />\n          </Grid> : null}\n        {list.response === \"success\" ? <ActorsList list={list.payload} /> : null}\n        {list.response === \"error\" ? list.message : null}\n      </TabPanel>\n    </>\n  );\n}\n\nexport default HomePage;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Home from './pages/Home';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Home />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}